<button
  type="button"
  class="wishlist-add-btn"
  data-customer-id="{{ customer.id | default: 'guest' }}"
  style="display:none;
  background: #111;
  color: #e5e5e5;
  border: none;
  padding: 10px 18px;
  font-size: 13px;
  font-weight: 600;
  align-items: center;
  justify-content: center;
  gap: 8px;
  cursor: pointer;
  transition: background 0.2s;
  box-sizing: border-box;
  width: 140px;
  margin: 12px auto 0 auto;">
  <span class="wishlist-add-icon-container" style="display:inline-block;vertical-align:middle;"></span>
  <span class="wishlist-add-btn-text">Add to Wishlist</span>
</button>
<!-- Wishlist Modal (No faded background, always centered) -->
<style>
#wishlist-modal {
  display: none;
  position: fixed;
  z-index: 9999;
  left: 0; top: 0; width: 100vw; height: 100vh;
  background: transparent;
}
#wishlist-modal .wishlist-modal-content {
  position: fixed;
  top: 50%; left: 50%;
  transform: translate(-50%, -50%);
  background: #fff;
  padding: 40px 32px 32px 32px;
  border-radius: 18px;
  width: 100%;
  max-width: 440px;
  min-width: 320px;
  min-height: 440px;
  max-height: 92vh;
  overflow-y: auto;
  box-shadow: 0 8px 32px rgba(0,0,0,0.18);
  display: flex;
  flex-direction: column;
  gap: 28px;
  font-family: inherit;
  font-size: 1.18rem;
}
#wishlist-modal h3 {
  margin: 0 0 12px 0;
  font-size: 1.6rem;
  font-weight: 700;
  text-align: center;
  letter-spacing: 0.01em;
}
#wishlist-modal .wishlist-section-title {
  font-size: 1.18rem;
  font-weight: 600;
  margin: 0 0 10px 0;
  color: #444;
}
#wishlist-modal select,
#wishlist-modal input[type="text"] {
  width: 100%;
  direction: ltr;
  padding: 14px 14px;
  font-size: 1.18rem;
  border: 1.5px solid #ccc;
  border-radius: 7px;
  margin-bottom: 14px;
  box-sizing: border-box;
  background: #fafafa;
  transition: border 0.18s;
}
#wishlist-modal select:focus,
#wishlist-modal input[type="text"]:focus {
  border: 2px solid #111;
  outline: none;
}
#wishlist-modal button {
  width: 100%;
  padding: 15px 0;
  font-size: 1.18rem;
  border: none;
  border-radius: 7px;
  margin-bottom: 14px;
  background: #111;
  color: #fff;
  font-weight: 700;
  cursor: pointer;
  transition: background 0.18s;
  letter-spacing: 0.01em;
}
#wishlist-section-title{
  direction: ltr;
  font-size:1.18rem;
  font-weight:700;
}
#wishlist-modal button#wishlist-modal-close {
  background: #eee;
  color: #222;
  margin-top: 6px;
}
#wishlist-modal button:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}
@media (max-width: 500px) {
  #wishlist-modal .wishlist-modal-content {
    min-width: 90vw;
    padding: 22px 6vw 22px 6vw;
    font-size: 1.05rem;
  }
}

/* Make wishlist-add-btn always clickable and on top, like collection page icon */
  .wishlist-add-btn {
    position: absolute !important;
  z-index: 99999 !important;
    pointer-events: auto !important;
  cursor: pointer !important;
    display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
    background: var(--wishlist-btn-bg, #111);
    color: var(--wishlist-btn-color, #fff);
    border: none;
    padding: 10px 18px;
    font-size: 13px;
    font-weight: 600;
    box-sizing: border-box;
    width: 45px;
    height: 45px;

  transition: background 0.2s;
}
/* Cleaned up: Only the button blocks propagation, anchors are clickable, and card allows overflow */
.card__inner a.full-unstyled-link,
.card__heading a.full-unstyled-link,
.card__heading a.full-unstyled-link:after {
  pointer-events: auto !important;
  z-index: 1 !important;
}
.card-wrapper, .product-card-wrapper {
  position: relative !important;
  box-sizing: border-box !important;
  outline: none !important;
  overflow: visible !important;
  padding: 20px !important;
  background: none !important;
  border: none !important;
  min-height: 200px !important;
}

.wishlist-add-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  padding: 0 18px;
  min-width: 90px;
  max-width: 180px;
  height: 40px;
  background: var(--wishlist-btn-bg, #ff0000);
  color: var(--wishlist-btn-color, #fff);
  border: none;
  border-radius: 20px;
  font-size: 15px;
  font-weight: 600;
  box-shadow: 0 2px 8px rgba(0,0,0,0.10);
  cursor: pointer;
  transition: background 0.2s, color 0.2s;
  z-index: 99999;
  position: absolute;
}
.wishlist-add-btn .wishlist-add-icon-container {
  display: inline-flex;
  align-items: center;
}
</style>
{% schema %}
{
  "name": "Wishlist Product Page",
  "target": "section", 
  "settings": []
}
{% endschema %}

<script>
function getWishlistIconSvgOrImg(iconType, customIcon, iconColor, iconThickness, size) {
  if (customIcon && customIcon.trim() !== '') {
   
    return '<img src="' + customIcon + '" alt="Wishlist Icon" style="width:' + size + 'px;height:' + size + 'px;object-fit:contain;" />';
  }
  if (iconType === "star") {
   
    return `<svg width="${size}" height="${size}" viewBox="0 0 24 24" fill="none" stroke="${iconColor}" stroke-width="${iconThickness}" stroke-linecap="round" stroke-linejoin="round"><polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"/></svg>`;
  } else if (iconType === "bookmark") {
   
    return `<svg width="${size}" height="${size}" viewBox="0 0 24 24" fill="none" stroke="${iconColor}" stroke-width="${iconThickness}" stroke-linecap="round" stroke-linejoin="round"><path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"/></svg>`;
  } else if (iconType === "heart") {
  
    return `<svg width="${size}" height="${size}" viewBox="0 0 24 24" fill="none" stroke="${iconColor}" stroke-width="${iconThickness}" stroke-linecap="round" stroke-linejoin="round"><path d="M12 21c-4.5-4.2-8-7.2-8-11.1C4 5.5 7.5 4 10 6.5c1.2 1.2 2 2.5 2 2.5s.8-1.3 2-2.5C16.5 4 20 5.5 20 9.9c0 2.2-1.2 4.2-3.5 6.7-.8.9-1.7 1.7-2.5 2.4z"/></svg>`;
  }
  return '';
}

document.addEventListener('DOMContentLoaded', function() {
  var templateBtn = document.querySelector('.wishlist-add-btn');
  if (!templateBtn) return;

  fetch('https://phpstack-362288-5709690.cloudwaysapps.com/api/wishlist-metafields')
    .then(response => response.json())
    .then(function(response) {
      var metafields = {};
      var metafieldsEdges = response.metafields || [];
      metafieldsEdges.forEach(function(edge) {
        metafields[edge.node.key] = edge.node.value;
      });
      // Debug: Log all metafields and key variables
      var iconTypeApi = metafields['icon_type'] || 'star';
      var iconThicknessApi = parseFloat(metafields['icon_thickness_product_page']) || 1.7;
      var bgColor = metafields['primary_color'] || '#111';
      var fontColor = metafields['secondary_color'] || '#e5e5e5';
      var buttonText = metafields['btn_text_product_page_before'] || 'Add to Wishlist';
      var buttonTextAfter = metafields['btn_text_product_page_after'] || 'Added to wishlist';
      var customIcon = (typeof window !== 'undefined' && window.wishlistCustomIcon && window.wishlistCustomIcon !== '') ? window.wishlistCustomIcon : '';
      // --- DYNAMIC POSITION LOGIC ---
      // Priority: extension setting > metafield > fallback
      var btnPositionSetting = window.wishlistButtonPosition;
      var btnPositionApi = metafields['btn_position_on_product_image'] || 'bottom_right';
      var btnPositionToUse = (btnPositionSetting && btnPositionSetting !== '' && btnPositionSetting !== 'Select Position')
        ? btnPositionSetting
        : btnPositionApi.replace(/_/g, '-');
      // --- END DYNAMIC POSITION LOGIC ---
      var btnType = metafields['btn_type_product_page'] || 'icon_and_text';
      var appearance = metafields['appearance_btn_product_page'] || 'solid';
      var btnHeight = parseInt(metafields['button_size_product_page']) || 45;
      var fontSize = Math.round(btnHeight * 0.4);
      var iconSize = Math.round(btnHeight * 0.6);
      var btnWidth;
      if (btnType === 'icon_and_text') {
        btnWidth = Math.round(btnHeight * 2.8);
      } else if (btnType === 'text' || btnType === 'only_text') {
        btnWidth = Math.round(btnHeight * 3.2);
      } else {
        btnWidth = btnHeight;
      }
      // --- DYNAMIC SELECTOR LOGIC ---
      // Priority: extension settings > metafields > fallback
      var selectorsToTry = [];
      if (window.wishlistProductLinkSelectorForProductPage && window.wishlistProductLinkSelectorForProductPage !== '-') {
        selectorsToTry.push(window.wishlistProductLinkSelectorForProductPage);
      }
      if (window.wishlistProductTileSelector && window.wishlistProductTileSelector !== '-') {
        selectorsToTry.push(window.wishlistProductTileSelector);
      }
      var productCardClasses = response.product_card_classes || [];
      if (typeof productCardClasses === 'string') {
        try {
          productCardClasses = JSON.parse(productCardClasses);
        } catch {
          productCardClasses = productCardClasses.split(',').map(s => s.trim()).filter(Boolean);
        }
      }
      selectorsToTry = selectorsToTry.concat(productCardClasses);
      if (!selectorsToTry.length) {
        selectorsToTry = ['.card__inner', '.product-card', '.card-wrapper', '.product-card-wrapper'];
      }
      var cards = [];
      var selectorSource = '';
      for (var i = 0; i < selectorsToTry.length; i++) {
        var selector = selectorsToTry[i];
        var normalizedSelector = selector;
        if (selector && !selector.startsWith('.') && !selector.startsWith('#')) {
          normalizedSelector = '.' + selector;
        }
        var foundCards = Array.from(document.querySelectorAll(normalizedSelector));
        if (foundCards.length) {
          cards = foundCards;
          // Debug: log which selector is being used and its source
          if (window.wishlistProductLinkSelectorForProductPage && normalizedSelector === (window.wishlistProductLinkSelectorForProductPage.startsWith('.') ? window.wishlistProductLinkSelectorForProductPage : '.' + window.wishlistProductLinkSelectorForProductPage)) {
            selectorSource = 'extension setting: product_link_selector_product_page';
          } else if (window.wishlistProductTileSelector && normalizedSelector === (window.wishlistProductTileSelector.startsWith('.') ? window.wishlistProductTileSelector : '.' + window.wishlistProductTileSelector)) {
            selectorSource = 'extension setting: product_tile_selector';
          } else {
            selectorSource = 'metafield or default';
          }
         
          break;
        }
      }
      if (!cards.length) {
       
      }
      // --- END DYNAMIC SELECTOR LOGIC ---
      cards.forEach(function(card) {
        if (card.querySelector('.wishlist-add-btn')) return;
        card.style.position = 'relative';
        var btn = templateBtn.cloneNode(true);
        btn.type = 'button';
        // Ensure customer id is copied from template
        btn.setAttribute('data-customer-id', templateBtn.getAttribute('data-customer-id'));
        // Try to get product id from card context
        var productId = card.getAttribute('data-product-id');
        if (!productId) {
          var hiddenId = card.querySelector("input[name='product_id']");
          if (hiddenId && hiddenId.value) {
            productId = hiddenId.value;
          }
          // Try to extract from anchor id (numeric product ID)
          if (!productId) {
            var anchor = card.querySelector('a.full-unstyled-link');
            if (anchor && anchor.id) {
              var idMatch = anchor.id.match(/(?:featured_collection|product-grid|product-card|product-template)[-_](\d{8,})/i);
              if (idMatch) {
                productId = idMatch[1];
              }
            }
          }
        }
        btn.setAttribute('data-product-id', productId || '');
        btn.style.display = 'flex';
        btn.style.height = btnHeight + 'px';
        btn.style.width = btnWidth + 'px';
        btn.style.minWidth = 'unset';
        btn.style.maxWidth = 'unset';
        btn.style.background = bgColor;
        btn.style.color = fontColor;
        btn.style.fontSize = fontSize + 'px';
        btn.style.fontWeight = '600';
        btn.style.border = (appearance === 'outline') ? '2px solid ' + bgColor : 'none';
        btn.style.boxShadow = 'none';
        btn.style.borderRadius = '0';
        btn.style.padding = '0 18px';
        var iconContainer = btn.querySelector('.wishlist-add-icon-container');
        var btnText = btn.querySelector('.wishlist-add-btn-text');
        // Icon/Text logic based on btnType
          if (iconContainer) {
          var svgOrImg = getWishlistIconSvgOrImg(iconTypeApi, customIcon, fontColor, iconThicknessApi, iconSize);
          iconContainer.innerHTML = svgOrImg;
          iconContainer.style.display = (btnType === 'icon_and_text' || btnType === 'icon' || btnType === 'only_icon') ? 'inline-block' : 'none';
        }
        if (btnText) {
          if (btnType === 'icon_and_text') {
          btnText.textContent = buttonText;
          btnText.style.display = 'inline-block';
            btnText.style.color = fontColor;
            btnText.style.fontSize = fontSize + 'px';
        } else if (btnType === 'icon' || btnType === 'only_icon') {
          btnText.style.display = 'none';
        } else if (btnType === 'text' || btnType === 'only_text') {
          btnText.textContent = buttonText;
          btnText.style.display = 'inline-block';
            btnText.style.color = fontColor;
            btnText.style.fontSize = fontSize + 'px';
            if (iconContainer) iconContainer.style.display = 'none';
          }
        }
        // --- DYNAMIC POSITION CSS ---
        btn.style.position = 'absolute';
        btn.style.top = '';
        btn.style.right = '';
        btn.style.bottom = '';
        btn.style.left = '';
        if (btnPositionToUse === 'bottom-right') {
          btn.style.bottom = '12px';
          btn.style.right = '12px';
        } else if (btnPositionToUse === 'bottom-left') {
          btn.style.bottom = '12px';
          btn.style.left = '12px';
        } else if (btnPositionToUse === 'top-right') {
          btn.style.top = '12px';
          btn.style.right = '12px';
        } else if (btnPositionToUse === 'top-left') {
          btn.style.top = '12px';
          btn.style.left = '12px';
        } else {
          btn.style.bottom = '12px';
          btn.style.right = '12px';
        }
        // --- END DYNAMIC POSITION CSS ---
        // Positioning and style logic based on button type
        if (btnType === 'only_icon' || btnType === 'icon') {
          // Make button size responsive to icon size and thickness
          var iconBtnSize = iconSize + 16; // 8px padding on each side
          btn.style.width = iconBtnSize + 'px';
          btn.style.height = iconBtnSize + 'px';
          btn.style.borderRadius = '50%';
          btn.style.boxShadow = '0 2px 8px rgba(0,0,0,0.12)';
          btn.style.padding = '0';
          btn.style.minWidth = iconBtnSize + 'px';
          btn.style.maxWidth = iconBtnSize + 'px';
        } else {
          btn.style.width = btnWidth + 'px';
          btn.style.height = btnHeight + 'px';
          btn.style.borderRadius = '0';
          btn.style.boxShadow = '0 2px 8px rgba(0,0,0,0.10)';
          btn.style.padding = '0 18px';
          btn.style.minWidth = '90px';
          btn.style.maxWidth = '180px';
        }
        // Attach full modal logic to each button
        btn.addEventListener('click', function(event) {
          event.preventDefault();
          event.stopPropagation();
          event.stopImmediatePropagation();
          var modal = document.getElementById('wishlist-modal');
          var select = document.getElementById('wishlist-select');
          var customerId = btn.getAttribute('data-customer-id') || (window.wishlistCustomerId || '');
          var productId = btn.getAttribute('data-product-id') || '';
          window.currentWishlistProductId = productId; // Store for modal use
          if (modal && select && customerId) {
            modal.style.display = 'flex';
            select.innerHTML = '<option>Loading...</option>';
            fetch('https://phpstack-362288-5709690.cloudwaysapps.com/api/wishlists?customer_id=' + encodeURIComponent(customerId))
              .then(res => res.json())
              .then(data => {
                select.innerHTML = '';
                if (!Array.isArray(data) || data.length === 0) {
                  select.innerHTML = '<option disabled>No wishlists yet</option>';
                } else {
                  data.forEach(wl => {
                    const opt = document.createElement('option');
                    opt.value = wl.id;
                    opt.textContent = wl.title;
                    select.appendChild(opt);
                  });
                }
              });
          }
          return false;
        });
        // Debug: Log where the button is appended and its computed style
        // Find the first matching child inside the card
        let appendTarget = null;
        let usedSelector = null;
        for (let selector of selectorsToTry) {
          let found = card.querySelector(selector);
          if (!found && !selector.startsWith('.') && !selector.startsWith('#')) {
            found = card.querySelector('.' + selector);
          }
          if (found) {
            appendTarget = found;
            usedSelector = selector;
            break;
          }
        }
        if (!appendTarget) appendTarget = card;
        appendTarget.style.position = 'relative';
        appendTarget.appendChild(btn);
        // Ensure button and parent are always clickable
        btn.style.pointerEvents = 'auto';
        btn.style.zIndex = '99999';
        appendTarget.style.pointerEvents = 'auto';
        appendTarget.style.zIndex = '999';
      });
      if (templateBtn.parentNode) {
        templateBtn.parentNode.removeChild(templateBtn);
      }
    })
    .catch(function() {
      // fallback: try extension selectors, then default
      var selectorsToTry = [];
      if (window.wishlistProductLinkSelectorForProductPage && window.wishlistProductLinkSelectorForProductPage !== '-') {
        selectorsToTry.push(window.wishlistProductLinkSelectorForProductPage);
      }
      if (window.wishlistProductTileSelector && window.wishlistProductTileSelector !== '-') {
        selectorsToTry.push(window.wishlistProductTileSelector);
      }
      if (!selectorsToTry.length) {
        selectorsToTry = ['.card__inner', '.product-card', '.card-wrapper', '.product-card-wrapper'];
      }
      var cards = [];
      for (var i = 0; i < selectorsToTry.length; i++) {
        var selector = selectorsToTry[i];
        if (selector && !selector.startsWith('.') && !selector.startsWith('#')) {
          selector = '.' + selector;
        }
        var foundCards = Array.from(document.querySelectorAll(selector));
        if (foundCards.length) {
          cards = foundCards;
          break;
        }
      }
      cards.forEach(function(card) {
        if (card.querySelector('.wishlist-add-btn')) return;
        card.style.position = 'relative';
        var btn = templateBtn.cloneNode(true);
        btn.style.display = 'flex';
        btn.style.position = 'absolute';
        btn.style.bottom = '12px';
        btn.style.right = '12px';
        card.appendChild(btn);
      });
      if (templateBtn.parentNode) {
        templateBtn.parentNode.removeChild(templateBtn);
      }
    });
});
</script>

<script>
function forceWishlistButtonClickable() {
  document.querySelectorAll('.wishlist-add-btn').forEach(btn => {
    btn.style.zIndex = '99999';
    btn.style.pointerEvents = 'auto';
    btn.style.position = 'absolute';
    btn.style.cursor = 'pointer';
  });
  // No pointer-events: none on anchors!
}

function attachWishlistBtnHandler() {
  document.querySelectorAll('.wishlist-add-btn').forEach(btn => {
    btn.onclick = null; // Remove any previous handler
    btn.addEventListener('click', function(event) {
      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();
      var modal = document.getElementById('wishlist-modal');
      if (modal) {
        modal.style.display = 'flex';
      }
      return false;
    });
  });
}

document.addEventListener('DOMContentLoaded', function() {
  forceWishlistButtonClickable();
  attachWishlistBtnHandler();
  // Shopify themes often rerender product cards dynamically
  const observer = new MutationObserver(function() {
    forceWishlistButtonClickable();
    attachWishlistBtnHandler();
  });
  observer.observe(document.body, { childList: true, subtree: true });
});
</script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Move wishlist-add-btn outside of any <a> or <form> parent to prevent navigation
  document.querySelectorAll('.wishlist-add-btn').forEach(function(btn) {
    var parent = btn.parentElement;
    while (parent && (parent.tagName === 'A' || parent.tagName === 'FORM')) {
      parent = parent.parentElement;
    }
    if (btn.parentElement !== parent) {
      parent.appendChild(btn);
    }
  });
});
document.addEventListener('click', function(e) {
}, true);
document.addEventListener('DOMContentLoaded', function() {
  var addBtn = document.querySelector('.wishlist-add-btn');
  var modal = document.getElementById('wishlist-modal');
  var select = document.getElementById('wishlist-select');
  var addToSelectedBtn = document.getElementById('wishlist-add-to-selected-btn');
  var createBtn = document.getElementById('wishlist-create-btn');
  var titleInput = document.getElementById('wishlist-title-input');
  var closeBtn = document.getElementById('wishlist-modal-close');
  // For product page, get customer from data attributes or context
  var customerId = addBtn ? addBtn.getAttribute('data-customer-id') : null;

  if (!addBtn) return;

  // Show modal and load wishlists
  addBtn.addEventListener('click', function(e) {
    e.preventDefault();
    modal.style.display = 'flex';
    select.innerHTML = '<option>Loading...</option>';
    fetch('https://phpstack-362288-5709690.cloudwaysapps.com/api/wishlists?customer_id=' + encodeURIComponent(customerId))
      .then(res => res.json())
      .then(data => {
        select.innerHTML = '';
        if (!Array.isArray(data) || data.length === 0) {
          select.innerHTML = '<option disabled>No wishlists yet</option>';
        } else {
          data.forEach(wl => {
            const opt = document.createElement('option');
            opt.value = wl.id;
            opt.textContent = wl.title;
            select.appendChild(opt);
          });
        }
      });
  });

  // Add to selected wishlist
  if (addToSelectedBtn) {
    addToSelectedBtn.addEventListener('click', function() {
      const wishlistId = select.value;
      var productId = window.currentWishlistProductId || null;
      if (!wishlistId) {
        alert('Please select a wishlist.');
        return;
      }
      addToSelectedBtn.textContent = 'Adding...';
      addToSelectedBtn.disabled = true;
      fetch('https://phpstack-362288-5709690.cloudwaysapps.com/api/wishlist-items', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({ wishlist_id: wishlistId, product_id: productId })
      })
      .then(res => res.json())
      .then(data => {
        if (data && data.message && data.message.toLowerCase().includes('already')) {
          alert('Item already in wishlist.');
        } else {
          alert('Added to wishlist!');
        }
        modal.style.display = 'none';
        addToSelectedBtn.textContent = 'Add to Selected';
        addToSelectedBtn.disabled = false;
      })
      .catch(() => {
        alert('Error adding to wishlist.');
        addToSelectedBtn.textContent = 'Add to Selected';
        addToSelectedBtn.disabled = false;
      });
    });
  }

  // Create new wishlist and add item
  if (createBtn) {
    createBtn.addEventListener('click', function() {
      const title = titleInput.value.trim();
      var productId = window.currentWishlistProductId || null;
      if (!title) {
        alert('Please enter a wishlist name.');
        return;
      }
      createBtn.textContent = 'Creating...';
      createBtn.disabled = true;
      fetch('https://phpstack-362288-5709690.cloudwaysapps.com/api/wishlists', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({ customer_id: customerId, title })
      })
      .then(res => res.json())
      .then(data => {
        // Now add the product to the new wishlist
        fetch('https://phpstack-362288-5709690.cloudwaysapps.com/api/wishlist-items', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify({ wishlist_id: data.id, product_id: productId })
        })
        .then(() => {
          alert('Wishlist created and product added!');
          modal.style.display = 'none';
          titleInput.value = '';
          createBtn.textContent = 'Create and Add';
          createBtn.disabled = false;
        });
      })
      .catch(() => {
        alert('Error creating wishlist.');
        createBtn.textContent = 'Create and Add';
        createBtn.disabled = false;
      });
    });
  }

  // Close modal
  if (closeBtn) {
  closeBtn.addEventListener('click', function() {
    modal.style.display = 'none';
  });
  }
});
  function enableWishlistClick() {
    // No pointer-events: none on anchors!
    document.querySelectorAll('.card__inner *:not(.wishlist-add-btn)').forEach(el => {
      el.style.pointerEvents = 'auto';
    });
    document.querySelectorAll('.wishlist-add-btn').forEach(btn => {
      btn.style.pointerEvents = 'auto';
      btn.style.zIndex = '9999';
      btn.style.position = 'absolute';
    });
  }

  enableWishlistClick();

  // Shopify themes often rerender product cards dynamically
  const observer = new MutationObserver(enableWishlistClick);
  observer.observe(document.body, { childList: true, subtree: true });
</script>

<script>
// Ensure the modal HTML is present in the DOM
if (!document.getElementById('wishlist-modal')) {
  var modalHtml = `
    <div id="wishlist-modal">
      <div class="wishlist-modal-content">
        <h3>Save to Wishlist</h3>
        <div id="wishlist-list-section">
          <div class="wishlist-section-title" dir="ltr" style="font-size:15px; font-weight:bold">Select Wishlist:</div>
          <select id="wishlist-select"></select>
          <button id="wishlist-add-to-selected-btn">Add to Selected</button>
        </div>
        <div id="wishlist-create-section">
          <div class="wishlist-section-title" dir="ltr" style="font-size:15px; font-weight:bold">Or create new:</div>
          <input type="text" id="wishlist-title-input" placeholder="Wishlist name" />
          <button id="wishlist-create-btn">Create and Add</button>
        </div>
        <button id="wishlist-modal-close">Cancel</button>
      </div>
    </div>
  `;
  document.body.insertAdjacentHTML('beforeend', modalHtml);
}
</script>