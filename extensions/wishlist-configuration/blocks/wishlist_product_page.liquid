<button type="button" class="wishlist-add-btn" style="display:none;
  background: #111;
  color: #e5e5e5;
  border: none;
  padding: 10px 18px;
  font-size: 13px;
  font-weight: 600;
  align-items: center;
  justify-content: center;
  gap: 8px;
  cursor: pointer;
  transition: background 0.2s;
  box-sizing: border-box;
  width: 140px;
  margin: 12px auto 0 auto;">
  <span class="wishlist-add-icon-container" style="display:inline-block;vertical-align:middle;"></span>
  <span class="wishlist-add-btn-text">Add to Wishlist</span>
</button>
<style>
  /* Fix anchor link overlay issue in Shopify product cards */
  .card__inner {
    position: relative;
    z-index: 1;
  }

  .card__inner a.full-unstyled-link {
    z-index: 1;
    position: relative;
  }

  .wishlist-add-btn {
    z-index: 10 !important;
  }
</style>
{% schema %}
{
  "name": "Wishlist Product Page",
  "target": "section", 
  "settings": []
}
{% endschema %}

<script>
var wishlistButtonIcon = window.wishlistButtonIcon || '';
var wishlistCustomIcon = window.wishlistCustomIcon || '';
var wishlistIconThickness = parseFloat(window.wishlistIconThickness) || 1.7;
var wishlistButtonPosition = window.wishlistButtonPosition || '';
var wishlistButtonSize = parseInt(window.wishlistButtonSize) || 140;
var wishlistPrimaryFontSize = parseInt(window.wishlistPrimaryFontSize) || 13;

function getWishlistIconSvg(iconType, color, thickness, size) {
  thickness = thickness || 1.7;
  size = size || 18; // Default size for SVG
  if (iconType === "star") {
    return `<svg width="${size}" height="${size}" viewBox="0 0 24 24" fill="none" stroke="${color}" stroke-width="${thickness}" stroke-linecap="round" stroke-linejoin="round"><polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"/></svg>`;
  } else if (iconType === "bookmark") {
    return `<svg width="${size}" height="${size}" viewBox="0 0 24 24" fill="none" stroke="${color}" stroke-width="${thickness}" stroke-linecap="round" stroke-linejoin="round"><path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"/></svg>`;
  } else if (iconType === "heart") {
    return `<svg width="${size}" height="${size}" viewBox="0 0 24 24" fill="none" stroke="${color}" stroke-width="${thickness}" stroke-linecap="round" stroke-linejoin="round"><path d="M12 21c-4.5-4.2-8-7.2-8-11.1C4 5.5 7.5 4 10 6.5c1.2 1.2 2 2.5 2 2.5s.8-1.3 2-2.5C16.5 4 20 5.5 20 9.9c0 2.2-1.2 4.2-3.5 6.7-.8.9-1.7 1.7-2.5 2.4z"/></svg>`;
  }
  return '';
}

document.addEventListener('DOMContentLoaded', function() {
  var templateBtn = document.querySelector('.wishlist-add-btn');
  if (!templateBtn) return;

  fetch('https://phpstack-362288-5709690.cloudwaysapps.com/api/wishlist-metafields')
    .then(response => response.json())
    .then(function(metafieldsEdges) {
      var metafields = {};
      metafieldsEdges.forEach(function(edge) {
        metafields[edge.node.key] = edge.node.value;
      });
      var iconTypeApi = metafields['icon_type'] || 'star';
      var iconThicknessApi = parseFloat(metafields['icon_thickness']) || 1.7;
      // Button background color logic: extension first (if valid), then metafield, then fallback
      var extBgColor = (typeof window.add_to_wishlist_btn_bg_color !== 'undefined' && window.add_to_wishlist_btn_bg_color && window.add_to_wishlist_btn_bg_color !== '' && window.add_to_wishlist_btn_bg_color !== 'transparent' && window.add_to_wishlist_btn_bg_color !== '#00000000' && window.add_to_wishlist_btn_bg_color !== 'none' && window.add_to_wishlist_btn_bg_color !== 'null' && window.add_to_wishlist_btn_bg_color !== null && window.add_to_wishlist_btn_bg_color !== 'rgba(0,0,0,0)') ? window.add_to_wishlist_btn_bg_color : null;
      var bgColor = extBgColor || metafields['primary_color'] || '#111';
      // Font color logic: extension first (if valid), then metafield, then fallback
      var extFontColor = (typeof window.wishlistAddBtnFontColor !== 'undefined' && window.wishlistAddBtnFontColor && window.wishlistAddBtnFontColor !== '' && window.wishlistAddBtnFontColor !== 'transparent' && window.wishlistAddBtnFontColor !== '#00000000' && window.wishlistAddBtnFontColor !== 'none' && window.wishlistAddBtnFontColor !== 'null' && window.wishlistAddBtnFontColor !== null && window.wishlistAddBtnFontColor !== 'rgba(0,0,0,0)') ? window.wishlistAddBtnFontColor : null;
      var fontColor = extFontColor || metafields['secondary_color'] || '#e5e5e5';
      var buttonText = metafields['btn_text_product_page_before'] || 'Add to Wishlist';
      var buttonTextAfter = metafields['btn_text_product_page_after'] || 'Added to wishlist';
      var btnPositionApi = metafields['btn_position_on_product_image'] || 'bottom_right';
      var btnType = metafields['btn_type_product_page'] || 'icon_and_text';
      var appearance = metafields['appearance_btn_product_page'] || 'solid';

      var cards = document.querySelectorAll('.card__inner');
      cards.forEach(function(card) {
        if (card.querySelector('.wishlist-add-btn')) return;
        card.style.position = 'relative';
        var btn = templateBtn.cloneNode(true);
        btn.type = 'button';
        btn.style.display = 'flex';
        // Button size logic: use extension field only
        var btnSize = (typeof window.wishlistButtonSize !== 'undefined' && window.wishlistButtonSize && !isNaN(parseInt(window.wishlistButtonSize))) ? parseInt(window.wishlistButtonSize) : 45;
        // Primary font size logic: use extension field only
        var primaryFontSize = (typeof window.wishlistPrimaryFontSize !== 'undefined' && window.wishlistPrimaryFontSize && !isNaN(parseInt(window.wishlistPrimaryFontSize))) ? parseInt(window.wishlistPrimaryFontSize) : 14;

        // Use btnSize for button width/height, icon size; use primaryFontSize for text size
        var buttonWidth, buttonHeight, iconSize, textSize;
      if (btnType === 'icon_and_text') {
          buttonWidth = btnSize * 2.8; // wider for icon+text
          buttonHeight = btnSize;
          iconSize = btnSize * 0.9;
          textSize = primaryFontSize;
          } else {
          buttonWidth = buttonHeight = btnSize;
          iconSize = btnSize * 0.9;
          textSize = primaryFontSize;
        }
        btn.style.width = buttonWidth + 'px';
        btn.style.height = buttonHeight + 'px';
        var iconContainer = btn.querySelector('.wishlist-add-icon-container');
        var btnText = btn.querySelector('.wishlist-add-btn-text');
        // For icon SVG or img
        if (iconContainer && iconContainer.children.length > 0) {
          var iconEl = iconContainer.children[0];
          if (iconEl.tagName === 'IMG') {
            iconEl.style.width = iconSize + 'px';
            iconEl.style.height = iconSize + 'px';
          } else if (iconEl.tagName === 'svg' || iconEl.tagName === 'SVG') {
            iconEl.setAttribute('width', iconSize);
            iconEl.setAttribute('height', iconSize);
            iconEl.style.fontSize = iconSize + 'px';
          }
        }
        // Appearance logic
        if (appearance === 'outline' || appearance === 'plain') {
          btn.style.background = 'none';
          btn.style.border = (appearance === 'outline') ? '2px solid ' + bgColor : 'none';
          btn.style.color = bgColor;
        } else {
          btn.style.background = bgColor;
          btn.style.border = 'none';
          btn.style.color = fontColor;
        }
        // Icon selection logic
        var iconCol = (appearance === 'outline' || appearance === 'plain') ? bgColor : fontColor;
        var iconTypeToUse;
        var useCustomIcon = wishlistCustomIcon && wishlistCustomIcon.trim() !== '';
        var isApiIcon = (!wishlistButtonIcon || wishlistButtonIcon === '' || wishlistButtonIcon === 'icon' || wishlistButtonIcon === 'Select icon');
        if (useCustomIcon) {
          iconTypeToUse = null;
        } else if (isApiIcon) {
          iconTypeToUse = iconTypeApi;
        } else {
          iconTypeToUse = wishlistButtonIcon;
        }
        var thicknessToUse = wishlistIconThickness;
        // Button type logic
        if (btnType === 'only_text') {
          if (iconContainer) {
            iconContainer.style.display = 'none';
        }
        if (btnText) {
          btnText.textContent = buttonText;
          btnText.style.display = 'inline-block';
            btnText.style.color = (appearance === 'outline' || appearance === 'plain') ? bgColor : fontColor;
            btnText.style.fontSize = primaryFontSize + 'px';
        }
        } else if (btnType === 'only_icon') {
        if (iconContainer) {
            if (useCustomIcon) {
              iconContainer.innerHTML = '<img src="' + wishlistCustomIcon + '" alt="Wishlist Icon" style="width:' + buttonHeight + 'px;height:' + buttonHeight + 'px;object-fit:contain;" />';
          } else {
              var svg = getWishlistIconSvg(iconTypeToUse, iconCol, thicknessToUse, buttonHeight);
              iconContainer.innerHTML = svg;
          }
            iconContainer.style.display = 'inline-flex';
            iconContainer.style.alignItems = 'center';
            iconContainer.style.verticalAlign = 'middle';
        }
        if (btnText) {
          btnText.style.display = 'none';
        }
        } else {
        if (iconContainer) {
            if (useCustomIcon) {
              iconContainer.innerHTML = '<img src="' + wishlistCustomIcon + '" alt="Wishlist Icon" style="width:' + buttonHeight + 'px;height:' + buttonHeight + 'px;object-fit:contain;" />';
            } else {
              var svg = getWishlistIconSvg(iconTypeToUse, iconCol, thicknessToUse, buttonHeight);
              iconContainer.innerHTML = svg;
            }
            iconContainer.style.display = 'inline-flex';
            iconContainer.style.alignItems = 'center';
            iconContainer.style.verticalAlign = 'middle';
        }
        if (btnText) {
          btnText.textContent = buttonText;
          btnText.style.display = 'inline-block';
            btnText.style.color = (appearance === 'outline' || appearance === 'plain') ? bgColor : fontColor;
            btnText.style.fontSize = primaryFontSize + 'px';
          }
        }
        // Positioning logic
        // Prefer extension's button position if set and not 'Select Position', otherwise API, otherwise fallback
        var btnPositionToUse = (
          wishlistButtonPosition &&
          wishlistButtonPosition !== '' &&
          wishlistButtonPosition !== 'Select Position'
        )
          ? wishlistButtonPosition
          : (metafields['btn_position_on_product_image'] && metafields['btn_position_on_product_image'] !== ''
              ? metafields['btn_position_on_product_image'].replace(/_/g, '-')
              : 'bottom-right');
        btn.style.position = 'absolute';
        if (btnPositionToUse === 'bottom-right') {
          btn.style.bottom = '12px';
          btn.style.right = '12px';
          btn.style.left = '';
          btn.style.top = '';
        } else if (btnPositionToUse === 'bottom-left') {
          btn.style.bottom = '12px';
          btn.style.left = '12px';
          btn.style.right = '';
          btn.style.top = '';
        } else if (btnPositionToUse === 'top-right') {
          btn.style.top = '12px';
          btn.style.right = '12px';
          btn.style.left = '';
          btn.style.bottom = '';
        } else if (btnPositionToUse === 'top-left') {
          btn.style.top = '12px';
          btn.style.left = '12px';
          btn.style.right = '';
          btn.style.bottom = '';
        } else {
          btn.style.bottom = '12px';
          btn.style.right = '12px';
          btn.style.left = '';
          btn.style.top = '';
        }
        btn.addEventListener('click', function(event) {
          event.preventDefault();
          event.stopPropagation();
          if (btnType === 'only_icon') {
            return;
          } else if (btnType === 'only_text') {
            if (btnText) {
              btnText.textContent = buttonTextAfter;
            }
          } else if (btnType === 'icon_and_text') {
            if (btnText) {
              btnText.textContent = buttonTextAfter;
            }
          }
        });
        card.appendChild(btn);
      });
      if (templateBtn.parentNode) {
        templateBtn.parentNode.removeChild(templateBtn);
      }
    })
    .catch(function() {
      var cards = document.querySelectorAll('.card__inner');
      cards.forEach(function(card) {
        if (card.querySelector('.wishlist-add-btn')) return;
        card.style.position = 'relative';
        var btn = templateBtn.cloneNode(true);
        btn.style.display = 'flex';
        btn.style.position = 'absolute';
        btn.style.bottom = '12px';
        btn.style.right = '12px';
        card.appendChild(btn);
      });
      if (templateBtn.parentNode) {
        templateBtn.parentNode.removeChild(templateBtn);
      }
    });
});
</script>