<button type="button" id="wishlist-add-btn" class="wishlist-add-btn" style="
  background: #111;
  color: #e5e5e5;
  border: none;
  padding: 14px 0;
  font-size: 15px;
  font-weight: 600;
  display: none;
  align-items: center;
  justify-content: center;
  gap: 12px;
  cursor: pointer;
  transition: background 0.2s;
  box-sizing: border-box;
  width: 300px;
  margin: 0 auto;
  border-radius: 0;
  margin-bottom: 16px;
">
  <span id="wishlist-add-icon-container" style="display:inline-block;vertical-align:middle;"></span>
  <span id="wishlist-add-btn-text">Add To Wishlist</span>
</button>

<script>
// Use the same icon and thickness logic as product page
var wishlistButtonIcon = window.wishlistButtonIcon || '';
var wishlistCustomIcon = window.wishlistCustomIcon || '';
var wishlistIconThickness = parseFloat(window.wishlistIconThickness) || 1.7;
var wishlistPrimaryFontSize = parseInt(window.wishlistPrimaryFontSize) || 15;

function getWishlistIconSvg(iconType, color, thickness, size) {
  thickness = thickness || 1.7;
  size = size || 24;
  if (iconType === "star") {
    return `<svg width="${size}" height="${size}" viewBox="0 0 24 24" fill="none" stroke="${color}" stroke-width="${thickness}" stroke-linecap="round" stroke-linejoin="round"><polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"/></svg>`;
  } else if (iconType === "bookmark") {
    return `<svg width="${size}" height="${size}" viewBox="0 0 24 24" fill="none" stroke="${color}" stroke-width="${thickness}" stroke-linecap="round" stroke-linejoin="round"><path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"/></svg>`;
  } else if (iconType === "heart") {
    return `<svg width="${size}" height="${size}" viewBox="0 0 24 24" fill="none" stroke="${color}" stroke-width="${thickness}" stroke-linecap="round" stroke-linejoin="round"><path d="M12 21c-4.5-4.2-8-7.2-8-11.1C4 5.5 7.5 4 10 6.5c1.2 1.2 2 2.5 2 2.5s.8-1.3 2-2.5C16.5 4 20 5.5 20 9.9c0 2.2-1.2 4.2-3.5 6.7-.8.9-1.7 1.7-2.5 2.4z"/></svg>`;
  }
  return '';
}

(function() {
  var btn = document.getElementById('wishlist-add-btn');
  var iconContainer = document.getElementById('wishlist-add-icon-container');
  var btnText = document.getElementById('wishlist-add-btn-text');
  fetch('http://127.0.0.1:8000/api/wishlist-metafields')
    .then(response => response.json())
    .then(function(metafieldsEdges) {
      var metafields = {};
      metafieldsEdges.forEach(function(edge) {
        metafields[edge.node.key] = edge.node.value;
      });
      var btnType = metafields['btn_type_product_page'] || 'icon_and_text';
      var iconTypeApi = metafields['icon_type'] || 'star';
      var iconThicknessApi = parseFloat(metafields['icon_thickness']) || 1.7;
      var color = metafields['secondary_color'] || window.wishlistAddBtnTextColor || window.wishlistAddBtnFontColor || '#e5e5e5';
      // Button background color logic: extension first (if valid), then metafield, then fallback
      var extBgColor = (typeof window.add_to_wishlist_btn_bg_color !== 'undefined' && window.add_to_wishlist_btn_bg_color && window.add_to_wishlist_btn_bg_color !== '' && window.add_to_wishlist_btn_bg_color !== 'transparent' && window.add_to_wishlist_btn_bg_color !== '#00000000' && window.add_to_wishlist_btn_bg_color !== 'none' && window.add_to_wishlist_btn_bg_color !== 'null' && window.add_to_wishlist_btn_bg_color !== null && window.add_to_wishlist_btn_bg_color !== 'rgba(0,0,0,0)') ? window.add_to_wishlist_btn_bg_color : null;
      var bgColor = extBgColor || metafields['primary_color'] || '#111';
      var customIcon = wishlistCustomIcon;
      var buttonText = metafields['btn_text_product_page_before'] || 'Add To Wishlist';
      var appearance = metafields['appearance_btn_product_page'] || 'solid';
      // Font color logic: extension first (if valid), then metafield, then fallback
      var extFontColor = (typeof window.wishlistAddBtnFontColor !== 'undefined' && window.wishlistAddBtnFontColor && window.wishlistAddBtnFontColor !== '' && window.wishlistAddBtnFontColor !== 'transparent' && window.wishlistAddBtnFontColor !== '#00000000' && window.wishlistAddBtnFontColor !== 'none' && window.wishlistAddBtnFontColor !== 'null' && window.wishlistAddBtnFontColor !== null && window.wishlistAddBtnFontColor !== 'rgba(0,0,0,0)') ? window.wishlistAddBtnFontColor : null;
      var fontColor = extFontColor || metafields['secondary_color'] || '#e5e5e5';
      var textIconColor = (appearance === 'outline' || appearance === 'plain') ? bgColor : fontColor;
      // Icon selection logic (same as product page)
      var useCustomIcon = customIcon && customIcon.trim() !== '';
      var isApiIcon = (!wishlistButtonIcon || wishlistButtonIcon === '' || wishlistButtonIcon === 'icon' || wishlistButtonIcon === 'Select icon');
      var iconTypeToUse = isApiIcon ? iconTypeApi : wishlistButtonIcon;
      var thicknessToUse = wishlistIconThickness || iconThicknessApi;
      var iconSize =  Math.round(wishlistPrimaryFontSize * 2.5) || 24;
      // Render according to btnType
      if (btnType === 'icon_and_text') {
        if (iconContainer) {
          if (useCustomIcon) {
            iconContainer.innerHTML = '<img src="' + customIcon + '" alt="Wishlist Icon" style="width:' + iconSize + 'px;height:' + iconSize + 'px;object-fit:contain;" />';
          } else {
            var svg = getWishlistIconSvg(iconTypeToUse, textIconColor, thicknessToUse, iconSize);
            if (isApiIcon) svg = svg.replace('<svg ', '<svg style="font-size:' + wishlistPrimaryFontSize + 'px;" ');
            iconContainer.innerHTML = svg;
          }
          iconContainer.style.display = 'inline-block';
        }
        if (btnText) {
          btnText.textContent = buttonText;
          btnText.style.display = 'inline-block';
          btnText.style.color = textIconColor;
        }
      } else if (btnType === 'icon' || btnType === 'only_icon') {
        if (iconContainer) {
          if (useCustomIcon) {
            iconContainer.innerHTML = '<img src="' + customIcon + '" alt="Wishlist Icon" style="width:' + iconSize + 'px;height:' + iconSize + 'px;object-fit:contain;" />';
          } else {
            var svg = getWishlistIconSvg(iconTypeToUse, textIconColor, thicknessToUse, iconSize);
            if (isApiIcon) svg = svg.replace('<svg ', '<svg style="font-size:' + wishlistPrimaryFontSize + 'px;" ');
            iconContainer.innerHTML = svg;
          }
          iconContainer.style.display = 'inline-block';
        }
        if (btnText) {
          btnText.style.display = 'none';
        }
      } else if (btnType === 'text' || btnType === 'only_text') {
        if (iconContainer) {
          iconContainer.innerHTML = '';
          iconContainer.style.display = 'none';
        }
        if (btnText) {
          btnText.textContent = buttonText;
          btnText.style.display = 'inline-block';
          btnText.style.color = textIconColor;
        }
      }
      // Appearance logic
      if (btn) {
        btn.style.background = 'none';
        btn.style.border = 'none';
        btn.style.boxShadow = 'none';
        btn.style.color = textIconColor;
        if (appearance === 'solid') {
          btn.style.background = bgColor;
          btn.style.border = 'none';
        } else if (appearance === 'outline') {
          btn.style.background = 'none';
          btn.style.border = '2px solid ' + bgColor;
          btn.style.color = bgColor;
        } else if (appearance === 'plain') {
          btn.style.background = 'none';
          btn.style.border = 'none';
          btn.style.color = bgColor;
        }
        btn.style.boxSizing = 'border-box';
      }
      // Remove border radius logic: always use 0
      if (btn) {
        btn.style.borderRadius = '0';
      }
      // Show the button after all dynamic styles are applied
      if (btn) btn.style.display = 'flex';
      // Add click handler to update text to metafield value
      if (btn) {
        btn.addEventListener('click', function() {
          // Use btnType from metafields
          var btnType = metafields['btn_type_product_page'] || 'icon_and_text';
          if (btnType === 'only_icon' || btnType === 'icon') {
            // Do nothing on click
            return;
          }
          var btnText = document.getElementById('wishlist-add-btn-text');
          var afterText = metafields['btn_text_product_page_after'] || 'Added';
          if (btnText) {
            btnText.textContent = afterText;
          }
        });
      }
    })
    .catch(function() {
      // If API fails, do not render icon again
    });
})();

(function() {
  fetch('http://127.0.0.1:8000/api/wishlist-metafields')
    .then(response => response.json())
    .then(function(metafieldsEdges) {
      var metafields = {};
      metafieldsEdges.forEach(function(edge) {
        metafields[edge.node.key] = edge.node.value;
      });
      var btnPosition = metafields['btn_position_on_product_page'];
      var wishlistBtn = document.getElementById('wishlist-add-btn');
      // Try to find the Add to cart button (adjust selector as needed)
      var cartBtn = document.querySelector('button[type="submit"], .add-to-cart, #AddToCart-product-template');
      if (!wishlistBtn || !cartBtn || !btnPosition) return;

      if (btnPosition === 'above_cart') {
        cartBtn.parentNode.insertBefore(wishlistBtn, cartBtn);
      } else if (btnPosition === 'below_cart') {
        cartBtn.parentNode.insertBefore(wishlistBtn, cartBtn.nextSibling);
      } else if (btnPosition === 'left_of_cart' || btnPosition === 'right_of_cart') {
        // Create a flex wrapper for just cart and wishlist buttons
        var flexWrapper = document.createElement('div');
        flexWrapper.style.display = 'flex';
        flexWrapper.style.flexDirection = 'row';
        flexWrapper.style.gap = '8px';
        flexWrapper.style.marginBottom = '16px'; // Add space below for Buy it now
        // Insert the wrapper before the cart button
        cartBtn.parentNode.insertBefore(flexWrapper, cartBtn);
        if (btnPosition === 'left_of_cart') {
          flexWrapper.appendChild(cartBtn);
          flexWrapper.appendChild(wishlistBtn);
        } else {
          flexWrapper.appendChild(wishlistBtn);
          flexWrapper.appendChild(cartBtn);
        }
      }
    });
})();

document.addEventListener("DOMContentLoaded", function() {
  var btn = document.getElementById('wishlist-add-btn');
  if (btn) btn.style.display = 'none'; // Ensure hidden by default
  if (btn) btn.style.height = '48px'; // Set consistent height
});
</script>

{% schema %}
{
  "name": "Add to Wishlist",
  "target": "section", 
  "settings": []
}
{% endschema %}